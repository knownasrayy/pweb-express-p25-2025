// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String? // Sesuai skema Anda (tidak 'not null')
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[] // Relasi ke Transaction (orders)
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Untuk soft delete

  books Book[] // Relasi ke Book
}

model Book {
  id              String  @id @default(uuid())
  title           String  @unique
  writer          String
  publisher       String
  publicationYear Int
  description     String?
  price           Float
  stockQuantity   Int     @default(0)

  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Restrict) // 'Restrict' mencegah genre dihapus jika buku masih ada

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Untuk soft delete

  transactionItems TransactionDetail[] // Relasi ke TransactionDetail (order_items)
}

// Model ini adalah tabel 'orders' Anda
// Saya ganti nama agar sesuai endpoint /transactions
model Transaction {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // WAJIB ADA: Untuk endpoint "Rata-rata nominal tiap transaksi"
  totalAmount Float

  transactionItems TransactionDetail[] // Relasi ke TransactionDetail (order_items)
}

// Model ini adalah tabel 'order_items' Anda
model TransactionDetail {
  id         String   @id @default(uuid())
  quantity   Int
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Restrict) // 'Restrict' memenuhi syarat "data pembelian tidak ikut terhapus"

  // WAJIB ADA: Menyimpan harga saat pembelian
  priceAtBuy Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}